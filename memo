자주 쓰는 숫자
4294967295 - 2의 32승 - 1

문서화 계획
1. 빠른 소수 찾기 알고리즘 문서 ibi::prime_all
2. 사칙연산 알고리즘
3. 다제곱근 바빌로니아 법
4. 디멘션 플러스
5. 최대공약수 알고리즘과 약분
6. 256진 표기법
7. ibr의 floor 함수와 나머지 연산
8. 테일러 급수를 활용한 다양한 함수 구하기
9. 유리수에서 무리수로의 확장법
10. expr 표현식 함수와 표현식 변수 _(붙이기 연산), xeRepeat(반복연산), xev0(식변수)
11. 귀납과 연역적 추론
12. 사용자 정의 operation (InsideCode)
13. 연산공간 (반복, 역, 성질변화)

expr 기호 : ꭢ
expr 구조
expr = vecarr<{ꭢsegtype, union{ꭢoper, ꭢvar, ꭢconst}}>

해석법 : 
oper이 먼저 나오고, 그 다음 var이나 const가 oper의 paramnum개 만큼 나온다.
만약 oper의 파라미터를 얻는 도중 oper를 만나면, 새로 발견한 oper를 처리하고 파라미터로 집어넣는다.
ex> 
+ [10, - [2, 3]] -> 10 + (2 - 3)

표기될때 교환법칙이 성립하는 파라미터끼리는 []로, 성립하지 않으면 ()로 묶어진다.
ex> 
f(2, [3, 4]) == f(2, [4, 3])

parameter_num == -1 이면, 파라미터 개수에 제한이 없고, 모든 파라미터가 교환법칙이 성립한다.
parameter_num == -2 이면, 파라미터 개수에 제한이 없고, 모든 파라미터가 교환법칙이 성립하지 않는다.
ex>
when param_num == -1
f[a, b, c, d, e] == f[e, d, c, b, a] == ...

when param_num == -2
f(a, b, c, d, e) != f(b, a, c, d, e)

두개의 파라미터만을 가지는 함수는 사용자의 정의에 의해 다음과 같이 표현될 수 있다.
ex>
^(a, b) == a ^ b